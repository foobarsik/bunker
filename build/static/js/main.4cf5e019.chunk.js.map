{"version":3,"sources":["reportWebVitals.ts","components/persona/health.ts","components/persona/sex.ts","components/persona/reproduction.ts","components/persona/jobs.ts","components/persona/mentalHealth.ts","components/persona/personalityTraits.ts","components/persona/age.ts","pages/personans/personans.tsx","router/routes.ts","router/router.tsx","models/pokemon/pokemon.ts","models/root-store/root-store.ts","models/extensions/with-environment.ts","models/root-store/root-context.ts","apis/pokemon/pokemon-api.ts","apis/base/base-api.ts","models/root-store/env.ts","models/root-store/setup-store.ts","index.tsx","utils/storage.ts"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","badHealth","sex","reproduction","jobs","jobMasteryLevels","mentalHealth","mentalHealthLevels","badPersonalityTraits","ageRanges","getRandomItem","arr","Math","floor","random","length","getUniqueRandomItem","splice","routes","path","component","useState","personas","setPersonas","className","type","onClick","persona","ageRange","console","log","age","health","job","jobMasteryLevel","mentalHealthLevel","personality","generatePersona","map","Router","route","element","PokemonModel","types","model","props","name","string","url","views","self","id","split","pop","actions","RootStoreModel","pokemons","array","extend","environment","getEnv","savePokemons","replace","loadPokemons","getAllPokemons","result","kind","Context","createContext","StoreProvider","Provider","PokemonApi","baseURL","this","sauce","get","limit","offset","response","ok","getGeneralApiProblem","data","results","next","push","config","create","problem","temporary","status","StoreEnvironment","ROOT_KEY","store","rootStore","env","key","almostThere","localStorage","getItem","JSON","parse","storage","e","onSnapshot","snapshot","value","setItem","stringify","setupStore","ReactDOM","render","document","getElementById"],"mappings":"0JAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,8BCTDQ,EAAY,CACxB,SACA,UACA,eACA,cACA,OACA,mBACA,UACA,kCACA,YACA,gCACA,gBACA,qBACA,YACA,cACA,qBACA,sBACA,qBACA,WACA,yBACA,4BACA,sDCrBYC,EAAM,CAAC,OAAQ,UCEfC,EAAY,UAFU,CAAC,eAAgB,YAClB,CAAC,aAAc,YAAa,YCyFjDC,EAAI,UA1FM,CACtB,kBACA,eACA,eACA,uBACA,oBACA,2BACA,4BACA,iBACA,kBACA,eACA,aACA,wBACA,aACA,UACA,YACA,sBACA,wBACA,UACA,oBACA,SACA,mBACA,aACA,YACA,gBACA,eACA,aACA,iBACA,aACA,SACA,eACA,4BACA,aACA,YACA,yCACA,gBACA,kBACA,yBACA,qBACA,cACA,SACA,MACA,mBACA,kBACA,sBAGyB,CACzB,sBACA,gBACA,oBACA,cACA,UACA,cACA,YACA,aACA,OACA,cACA,UACA,cACA,UAGuB,CACvB,UACA,YACA,eACA,cACA,qBACA,QACA,iBACA,kBACA,WACA,SACA,cACA,gBACA,YACA,oBACA,gCACA,YACA,WACA,UACA,YACA,QACA,iBACA,gBACA,SACA,YAKYC,EAAmB,CAAC,gCAAiC,OAAQ,QCpE7DC,EAAY,UAxBM,CAC9B,4BACA,aACA,YACA,aACA,UACA,aACA,gBACA,+BACA,WACA,mBACA,gBACA,YACA,UACA,cACA,oBACA,gBACA,eAG+B,CAC/B,uBAKYC,EAAqB,CAAC,GAAI,GAAI,GAAI,KC1BlCC,EAAuB,CACnC,SACA,eACA,OACA,WACA,kBACA,0BACA,YACA,cACA,qBACA,2BACA,+BACA,qCACA,mBACA,2BACA,aACA,6BACA,uBACA,cACA,YA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","file":"static/js/main.4cf5e019.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const badHealth = [\n\t'barren',\n\t'no arms',\n\t'almost blind',\n\t'almost deaf',\n\t'mute',\n\t'chronic diarrhea',\n\t'obesity',\n\t'Alzheimer\\'s in the early stages',\n\t'Parkinson',\n\t'can give birth only to dwarfs',\n\t'have few STDs',\n\t'sexual dysfunction',\n\t'scoliosis',\n\t'dog allergy',\n\t'lactose intolerant',\n\t'high blood pressure',\n\t'low blood pressure',\n\t'insomnia',\n\t'recovering from stroke',\n\t'gynaecomastia (man boobs)',\n\t'werewolf syndrome (excessive hair growth anywhere)'\n]\n","export const sex = ['male', 'female'];","export const goodForReproduction = ['heterosexual', 'bisexual'];\nexport const badForReproduction = ['homosexual', 'childfree', 'asexual'];\nexport const reproduction = [...goodForReproduction, ...badForReproduction];","export const badJobs = [\n\t'Ayurveda Healer',\n\t'Bike Courier',\n\t'Body Painter',\n\t'Feng Shui Consultant',\n\t'Nail Polish Namer',\n\t'Veterinary Acupuncturist',\n\t'Pick-up Artist Instructor',\n\t'Security Guard',\n\t'Project Manager',\n\t'Truck Driver',\n\t'Dishwasher',\n\t'Online Captcha Typist',\n\t'Pharmacist',\n\t'Doorman',\n\t'Tour Gide',\n\t'Crime Scene Cleaner',\n\t'Slaughterhouse Worker',\n\t'Stylist',\n\t'Real Estate Agent',\n\t'Rapper',\n\t'Flight Attendant',\n\t'Dog Walker',\n\t'Librarian',\n\t'Archaeologist',\n\t'Veterinarian',\n\t'Accountant',\n\t'Police Officer',\n\t'Politician',\n\t'Lawyer',\n\t'Screenwriter',\n\t'Virtual Reality Developer',\n\t'Life Coach',\n\t'Bartender',\n\t'Doctor of Philosophy in Social Justice',\n\t'Ornithologist',\n\t'Waiter/Waitress',\n\t'Crowdfunding Organizer',\n\t'Privacy Specialist',\n\t'Drug Dealer',\n\t'Priest',\n\t'Nun',\n\t'Marijuana Farmer',\n\t'Cartoon creator',\n\t'Olympic Ice Skater'\n]\n\nexport const normalJobs = [\n\t'General of the Army',\n\t'Social Worker',\n\t'Massage Therapist',\n\t'Firefighter',\n\t'Dentist',\n\t'Hairdresser',\n\t'Bodyguard',\n\t'Sexologist',\n\t'Cook',\n\t'UX Designer',\n\t'Plumber',\n\t'Meth Cooker',\n\t'Hacker'\n]\n\nexport const goodJobs = [\n\t'Surgeon',\n\t'Biologist',\n\t'Psychiatrist',\n\t'Electrician',\n\t'Software Developer',\n\t'Nurse',\n\t'School Teacher',\n\t'Fitness Trainer',\n\t'Mechanic',\n\t'Doctor',\n\t'Drone Pilot',\n\t'Food Engineer',\n\t'Architect',\n\t'Robotics Engineer',\n\t'Custom Implant Organ Designer',\n\t'Geologist',\n\t'Botanist',\n\t'Chemist',\n\t'Physician',\n\t'Miner',\n\t'Microbiologist',\n\t'Meteorologist',\n\t'Farmer',\n\t'Midwife',\n]\n\nexport const jobs = [...badJobs, ...normalJobs, ...goodJobs];\n\nexport const jobMasteryLevels = ['little experience or just bad', 'good', 'best'];","export const badMentalHealth = [\n\t'Several suicidal attempts',\n\t'Psychopath',\n\t'Sociopath',\n\t'Depression',\n\t'Bipolar',\n\t'Narcissist',\n\t'Schizophrenia',\n\t'Sexual attraction to corpses',\n\t'Paranoia',\n\t'Gender Dysphoria',\n\t'Exhibitionist',\n\t'Voyeurist',\n\t'Anxiety',\n\t'Sociophobia',\n\t'Depersonalization',\n\t'Sex addiction',\n\t'Kleptomania'\n]\n\nexport const goodMentalHealth = [\n\t'Good mental health',\n]\n\nexport const mentalHealth = [...badMentalHealth, ...goodMentalHealth];\n\nexport const mentalHealthLevels = [25, 50, 75, 100];\n","export const badPersonalityTraits = [\n\t'boring',\n\t'anger issues',\n\t'lazy',\n\t'satanist',\n\t'jehovah witness',\n\t'always telling spoilers',\n\t'communist',\n\t'curse a lot',\n\t'passive-aggressive',\n\t'abusive in relationships',\n\t'was in a prison for a murder',\n\t'can\\'t accept that he/she was wrong',\n\t'radical feminist',\n\t'acts like Sheldon Cooper',\n\t'very naive',\n\t'likes to tell racist jokes',\n\t'has a lot of secrets',\n\t'drug addict',\n\t'alcoholic',\n\t'hates children',\n\t'drag queen',\n]","export const goodAgeRange = [18, 35];\nexport const normalAgeRange = [36, 55];\nexport const badAgeRange = [56, 90];\n\nexport const ageRanges = [[18, 35], [36, 55], [56, 100]];","import React, { useState } from \"react\";\nimport { badHealth } from \"../../components/persona/health\";\nimport { sex } from \"../../components/persona/sex\";\nimport { reproduction } from \"../../components/persona/reproduction\";\nimport { jobMasteryLevels, jobs } from \"../../components/persona/jobs\";\nimport { mentalHealth, mentalHealthLevels } from \"../../components/persona/mentalHealth\";\nimport { badPersonalityTraits } from \"../../components/persona/personalityTraits\";\nimport { ageRanges } from \"../../components/persona/age\";\n\nconst getRandomItem: any = (arr: any[]) => arr[Math.floor(Math.random() * arr.length)];\nconst getUniqueRandomItem: any = (arr: any[]) => arr.splice((Math.random() * arr.length) | 0, 1);\n\ntype Persona = {\n\tage: number,\n\tsex: string,\n\treproduction: string,\n\thealth: string,\n\tjob: string,\n\tjobMasteryLevel: string,\n\tmentalHealth: string,\n\tmentalHealthLevel: number,\n\tpersonality: string\n}\n\nconst generatePersona = (): Persona => {\n\tconst ageRange = getRandomItem(ageRanges);\nconsole.log(ageRange);\n\treturn {\n\t\tage: Math.floor(Math.random() * (ageRange[1] - ageRange[0] + 1) + ageRange[0]),\n\t\tsex: getRandomItem(sex),\n\t\treproduction: getRandomItem(reproduction),\n\t\thealth: getUniqueRandomItem(badHealth),\n\t\tjob: getUniqueRandomItem(jobs),\n\t\tjobMasteryLevel: getRandomItem(jobMasteryLevels),\n\t\tmentalHealth: getUniqueRandomItem(mentalHealth),\n\t\tmentalHealthLevel: getRandomItem(mentalHealthLevels),\n\t\tpersonality: getUniqueRandomItem(badPersonalityTraits)\n\t};\n};\n\nexport const Persona: React.FC = () => {\n\tconst [personas, setPersonas] = useState<Array<Persona>>([]);\n\n\tconst addPersona = () => {\n\t\tconst persona = generatePersona();\n\t\tsetPersonas([...personas, persona]);\n\t};\n\n\treturn (\n\t\t<div className=\"card\">\n\t\t\t<button type=\"button\" className=\"\" onClick={addPersona}>Generate Persona</button>\n\t\t\t\t{personas.map((persona) => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={persona.job}>\n\t\t\t\t\t\t<div>{persona.sex}/{persona.age}/{persona.reproduction}</div>\n\t\t\t\t\t\t<div>Occupation: {persona.job} ({persona.jobMasteryLevel})</div>\n\t\t\t\t\t\t<div>Health problems: {persona.health}</div>\n\t\t\t\t\t\t<div>Mental health: {persona.mentalHealth} {persona.mentalHealthLevel}%</div>\n\t\t\t\t\t\t<div>Additional info: {persona.personality}</div>\n\t\t\t\t\t\t<div>----</div>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n};","import { FC } from \"react\";\nimport { Persona } from \"../pages/personans\";\n\n/**\n * Basic route type that the router consumes for dynamic generation\n */\ntype Route = {\n\tpath: string;\n\tcomponent: FC;\n};\n\n/**\n * Define your routes here\n */\nexport const routes: Route[] = [\n\t{\n\t\tpath: \"/\",\n\t\tcomponent: Persona,\n\t},\n];\n","/**\n * Dynamically add routes based on the list defined in ./routes.ts,\n * can be customized to meet your use case\n */\n\nimport React from \"react\";\nimport { Route, Routes } from \"react-router\";\nimport { routes } from \"./routes\";\n\nexport const Router = () => {\n\treturn (\n\t\t<Routes>\n\t\t\t{routes.map((route) => (\n\t\t\t\t<Route\n\t\t\t\t\tkey={route.path}\n\t\t\t\t\tpath={route.path}\n\t\t\t\t\telement={<route.component />}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</Routes>\n\t);\n};\n","import { Instance, SnapshotOut, types } from \"mobx-state-tree\";\n\n/**\n * Define what your model does\n */\nexport const PokemonModel = types\n\t.model(\"Pokemon\")\n\t.props({\n\t\t// TODO: Define Pokemon properties here\n\t\tname: types.string,\n\t\turl: types.string,\n\t})\n\t.views((self) => ({\n\t\t// TODO: Define Pokemon views here (if any)\n\t\tget id() {\n\t\t\treturn self.url.split(\"/\").pop();\n\t\t},\n\t}))\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t.actions((self) => ({\n\t\t// TODO: Define Pokemon actions here (if any)\n\t}));\n\nexport type Pokemon = Instance<typeof PokemonModel>;\nexport type PokemonSnapshot = SnapshotOut<typeof PokemonModel>;\n","import { Instance, SnapshotOut, types } from \"mobx-state-tree\";\nimport { withEnvironment } from \"../extensions/with-environment\";\nimport { PokemonModel, PokemonSnapshot, Pokemon } from \"../pokemon\";\n\n/**\n * The root store, any properties defined here will be accessible\n * by any observers that consume it\n */\nexport const RootStoreModel = types\n\t.model(\"Root\")\n\t.props({\n\t\tpokemons: types.array(PokemonModel),\n\t})\n\t.extend(withEnvironment)\n\t.actions((self) => ({\n\t\t/**\n\t\t * Save a new list of pokemons in the store\n\t\t */\n\t\tsavePokemons(pokemons: PokemonSnapshot[]) {\n\t\t\tself.pokemons.replace(pokemons as Pokemon[]);\n\t\t},\n\t}))\n\t.actions((self) => ({\n\t\t/**\n\t\t * Load the pokemons from the API\n\t\t */\n\t\tasync loadPokemons() {\n\t\t\tconst result = await self.environment.pokemons.getAllPokemons();\n\t\t\tif (result.kind === \"ok\") {\n\t\t\t\tself.savePokemons(result.result);\n\t\t\t}\n\t\t},\n\t}));\n\nexport type RootStore = Instance<typeof RootStoreModel>;\nexport type RootStoreSnapshot = SnapshotOut<typeof RootStoreModel>;\n","import { getEnv, IStateTreeNode } from \"mobx-state-tree\";\nimport { StoreEnvironment } from \"../root-store/env\";\n\n/**\n * Adds a environment property to the node for accessing our\n * Environment in strongly typed.\n */\nexport const withEnvironment = (self: IStateTreeNode) => ({\n  views: {\n    /**\n     * The environment.\n     */\n    get environment() {\n      return getEnv<StoreEnvironment>(self);\n    },\n  },\n});\n","import { createContext, useContext } from \"react\";\nimport { RootStore } from \"./root-store\";\n\n/**\n * Store context for usage inside react components\n */\nconst Context = createContext<RootStore>({} as RootStore);\n\n/**\n * The store provider that wraps the children components\n */\nexport const StoreProvider = Context.Provider;\n\n/**\n * A hook that is used to access the store inside react components\n */\nexport const useStore = () => useContext(Context);\n","import { BaseApi } from \"../base\";\nimport { BaseResponse } from \"../base/types\";\nimport { NamedResource, ResourceList } from \"./types\";\n/**\n * Example class of implementing BaseApi\n */\nexport class PokemonApi extends BaseApi {\n\tconstructor() {\n\t\tsuper({\n\t\t\tbaseURL: \"https://pokeapi.co/api/v2/\",\n\t\t});\n\t}\n\t/**\n\t * Get a list of all the pokemons from the API\n\t */\n\tasync getAllPokemons(): Promise<BaseResponse<NamedResource[]>> {\n\t\tconst url = \"/pokemon\";\n\t\tlet response = await this.sauce.get<ResourceList>(url, {\n\t\t\tlimit: 100,\n\t\t\toffset: 0,\n\t\t});\n\t\tif (!response.ok) {\n\t\t\treturn this.getGeneralApiProblem(response) || { kind: \"bad-data\" };\n\t\t}\n\t\tconst result = response.data?.results || [];\n\t\twhile (response.data?.next) {\n\t\t\tresponse = await this.sauce.get<ResourceList>(response.data.next);\n\t\t\tif (!response.ok) {\n\t\t\t\treturn this.getGeneralApiProblem(response) || { kind: \"bad-data\" };\n\t\t\t}\n\t\t\tresult.push(...(response.data?.results || []));\n\t\t}\n\t\treturn { kind: \"ok\", result };\n\t}\n}\n","import {\n\tApiResponse,\n\tApisauceConfig,\n\tApisauceInstance,\n\tcreate,\n} from \"apisauce\";\nimport { GeneralApiProblem } from \"./types\";\n\n/**\n * Abstract class used as a standard template for API clients\n */\nexport abstract class BaseApi {\n\tprotected sauce: ApisauceInstance;\n\tconstructor(config: ApisauceConfig) {\n\t\tthis.sauce = create(config);\n\t}\n\t/**\n\t * A protected method used to regularize the way errors\n\t * are presented from the API side\n\t */\n\tprotected getGeneralApiProblem<T>(\n\t\tresponse: ApiResponse<T>\n\t): GeneralApiProblem | null {\n\t\tswitch (response.problem) {\n\t\t\tcase \"CONNECTION_ERROR\":\n\t\t\t\treturn { kind: \"cannot-connect\", temporary: true };\n\t\t\tcase \"NETWORK_ERROR\":\n\t\t\t\treturn { kind: \"cannot-connect\", temporary: true };\n\t\t\tcase \"TIMEOUT_ERROR\":\n\t\t\t\treturn { kind: \"timeout\", temporary: true };\n\t\t\tcase \"SERVER_ERROR\":\n\t\t\t\treturn { kind: \"server\" };\n\t\t\tcase \"UNKNOWN_ERROR\":\n\t\t\t\treturn { kind: \"unknown\", temporary: true };\n\t\t\tcase \"CLIENT_ERROR\":\n\t\t\t\tswitch (response.status) {\n\t\t\t\t\tcase 401:\n\t\t\t\t\t\treturn { kind: \"unauthorized\" };\n\t\t\t\t\tcase 403:\n\t\t\t\t\t\treturn { kind: \"forbidden\" };\n\t\t\t\t\tcase 404:\n\t\t\t\t\t\treturn { kind: \"not-found\" };\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn { kind: \"rejected\" };\n\t\t\t\t}\n\t\t\tcase \"CANCEL_ERROR\":\n\t\t\t\treturn null;\n\t\t}\n\t\treturn null;\n\t}\n}\n","import { PokemonApi } from \"../../apis/pokemon/pokemon-api\";\n\n/**\n * Environment is defined as a class here for injection that is provided by mobx-state-tree\n */\nexport class StoreEnvironment {\n\t/**\n\t * The PokeApi client\n\t */\n\tpokemons: PokemonApi;\n\t// TODO: Can define other environment variables here, process.env can be used here as well for any API keys\n\tconstructor() {\n\t\t// TODO: Define any setup for the environment variables and/or initializations here\n\t\tthis.pokemons = new PokemonApi();\n\t}\n}\n","/**\n * Heavily inspired by Ignite implementation\n * @see https://github.com/infinitered/ignite/blob/master/boilerplate/app/models/root-store/setup-root-store.ts\n */\n\nimport { onSnapshot } from \"mobx-state-tree\";\nimport { RootStoreModel, RootStore } from \"./root-store\";\nimport { StoreEnvironment } from \"./env\";\nimport * as storage from \"../../utils/storage\";\nimport { RootStoreSnapshot } from \".\";\n\n/**\n * The key we'll be saving our state as within async storage.\n */\nconst ROOT_KEY = \"root\";\n\n/**\n * Setup the root state.\n */\nexport function setupStore() {\n\tlet rootStore: RootStore;\n\tlet data: unknown;\n\n\t// prepare the environment that will be associated with the RootStore.\n\tconst env = new StoreEnvironment();\n\ttry {\n\t\t// load data from storage\n\t\tdata = storage.load(ROOT_KEY) || {};\n\t\trootStore = RootStoreModel.create(data as RootStoreSnapshot, env);\n\t} catch (e) {\n\t\t// if there's any problems loading, then let's at least fallback to an empty state\n\t\t// instead of crashing.\n\t\trootStore = RootStoreModel.create({}, env);\n\t}\n\n\t// track changes & save to storage\n\tonSnapshot(\n\t\trootStore,\n\t\t({\n\t\t\t// TODO: Exclude any nodes here if needed\n\t\t\t...snapshot\n\t\t}) => storage.save(ROOT_KEY, snapshot)\n\t);\n\n\treturn rootStore;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Router } from \"./router\";\nimport { setupStore, StoreProvider } from \"./models\";\n\nconst store = setupStore();\n\nReactDOM.render(\n  <StoreProvider value={store}>\n    <BrowserRouter>\n      <Router />\n    </BrowserRouter>\n  </StoreProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// Shamelessly taken from https://github.com/infinitered/ignite/blob/master/boilerplate/app/utils/storage/storage.ts\n\n/**\n * Loads a string from storage.\n *\n * @param key The key to fetch.\n */\nexport function loadString(key: string): string | null {\n\ttry {\n\t\treturn localStorage.getItem(key);\n\t} catch {\n\t\t// not sure why this would fail... even reading the RN docs I'm unclear\n\t\treturn null;\n\t}\n}\n\n/**\n * Saves a string to storage.\n *\n * @param key The key to fetch.\n * @param value The value to store.\n */\nexport function saveString(key: string, value: string): boolean {\n\ttry {\n\t\tlocalStorage.setItem(key, value);\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n}\n\n/**\n * Loads something from storage and runs it thru JSON.parse.\n *\n * @param key The key to fetch.\n */\nexport function load(key: string): unknown | null {\n\ttry {\n\t\tconst almostThere = localStorage.getItem(key);\n\t\treturn JSON.parse(almostThere || \"{}\");\n\t} catch {\n\t\treturn null;\n\t}\n}\n\n/**\n * Saves an object to storage.\n *\n * @param key The key to fetch.\n * @param value The value to store.\n */\nexport function save(key: string, value: unknown): boolean {\n\ttry {\n\t\tlocalStorage.setItem(key, JSON.stringify(value));\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n}\n\n/**\n * Removes something from storage.\n *\n * @param key The key to kill.\n */\nexport function remove(key: string): void {\n\tlocalStorage.removeItem(key);\n}\n\n/**\n * Burn it all to the ground.\n */\nexport function clear(): void {\n\tlocalStorage.clear();\n}\n"],"sourceRoot":""}